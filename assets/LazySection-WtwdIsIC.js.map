{"version":3,"file":"LazySection-WtwdIsIC.js","sources":["../../src/composables/useLazySection.ts","../../src/components/LazySection.vue"],"sourcesContent":["import { ref, onMounted, onBeforeUnmount } from 'vue'\r\nimport type { Ref } from 'vue'\r\n\r\ninterface LazyProps {\r\n  threshold: number;\r\n  rootMargin: string;\r\n}\r\n\r\ninterface LazySection {\r\n  lazySection: Ref<HTMLElement | null>;\r\n  isVisible: Ref<boolean>;\r\n}\r\n\r\nexport function useLazySection(props: LazyProps): LazySection {\r\n  const lazySection = ref<HTMLElement | null>(null)\r\n  const isVisible = ref<boolean>(false)\r\n  let observer: IntersectionObserver | null = null\r\n\r\n  onMounted(() => {\r\n    observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach(entry => {\r\n          isVisible.value = entry.isIntersecting\r\n        })\r\n      },\r\n      {\r\n        threshold: props.threshold,\r\n        rootMargin: props.rootMargin\r\n      }\r\n    )\r\n    \r\n    if (lazySection.value) {\r\n      observer.observe(lazySection.value)\r\n    }\r\n  })\r\n\r\n  onBeforeUnmount(() => {\r\n    if (observer && lazySection.value) {\r\n      observer.unobserve(lazySection.value)\r\n      observer.disconnect()\r\n    }\r\n  })\r\n\r\n  return {\r\n    lazySection,\r\n    isVisible\r\n  }\r\n} ","<template>\r\n  <div ref=\"lazySection\" :class=\"['lazy-section', { 'lazy-visible': isVisible, 'lazy-hidden': !isVisible }]\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { useLazySection } from '../composables/useLazySection'\r\n\r\nconst props = defineProps({\r\n  threshold: {\r\n    type: [Number, String],\r\n    default: 0.1,\r\n    validator: (value: number | string): boolean => {\r\n      const numValue = typeof value === 'string' ? parseFloat(value) : value;\r\n      return !isNaN(numValue) && numValue >= 0 && numValue <= 1;\r\n    }\r\n  },\r\n  rootMargin: {\r\n    type: String,\r\n    default: '0px'\r\n  }\r\n})\r\n\r\n// Convert threshold to number if it's a string\r\nconst parsedProps = {\r\n  threshold: typeof props.threshold === 'string' ? parseFloat(props.threshold) : props.threshold,\r\n  rootMargin: props.rootMargin\r\n};\r\n\r\nconst { lazySection, isVisible } = useLazySection(parsedProps)\r\n</script>\r\n\r\n<script lang=\"ts\">\r\nexport default {\r\n  name: 'LazySection'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.lazy-section {\r\n  display: block;\r\n  perspective: 1000px;\r\n}\r\n\r\n.lazy-hidden {\r\n  opacity: 0;\r\n  transform: translateY(80px) scale(0.9) rotate(-2deg);\r\n  transition: opacity 0.5s cubic-bezier(0.19, 1, 0.22, 1), transform 0.5s cubic-bezier(0.19, 1, 0.22, 1), filter 0.5s ease;\r\n  filter: blur(8px);\r\n  transform-origin: center bottom;\r\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0);\r\n}\r\n\r\n.lazy-visible {\r\n  opacity: 1;\r\n  transform: translateY(0) scale(1) rotate(0);\r\n  transition: opacity 0.5s cubic-bezier(0.19, 1, 0.22, 1), transform 0.5s cubic-bezier(0.19, 1, 0.22, 1), filter 0.5s ease, box-shadow 0.5s ease;\r\n  filter: blur(0);\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\r\n}\r\n</style>\r\n"],"names":["_createElementBlock","_normalizeClass","_unref","_renderSlot"],"mappings":";;;AAaO,SAAS,eAAe,OAA+B;AAC5D,QAAM,cAAc,IAAwB,IAAI;AAChD,QAAM,YAAY,IAAa,KAAK;AACpC,MAAI,WAAwC;AAE5C,YAAU,MAAM;AACd,eAAW,IAAI;AAAA,MACb,CAAC,YAAY;AACX,gBAAQ,QAAQ,CAAA,UAAS;AACvB,oBAAU,QAAQ,MAAM;AAAA,QAAA,CACzB;AAAA,MAAA;AAAA,MAEH;AAAA,QACE,WAAW,MAAM;AAAA,QACjB,YAAY,MAAM;AAAA,MAAA;AAAA,IACpB;AAGF,QAAI,YAAY,OAAO;AACrB,eAAS,QAAQ,YAAY,KAAK;AAAA,IAAA;AAAA,EACpC,CACD;AAED,kBAAgB,MAAM;AACpB,QAAI,YAAY,YAAY,OAAO;AACjC,eAAS,UAAU,YAAY,KAAK;AACpC,eAAS,WAAA;AAAA,IAAW;AAAA,EACtB,CACD;AAED,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EAAA;AAEJ;ACbA,MAAA,cAAe;AAAA,EACb,MAAM;AACR;;;;;;;;;;;;;;;;;;AA3BA,UAAM,QAAQ;AAgBd,UAAM,cAAc;AAAA,MAClB,WAAW,OAAO,MAAM,cAAc,WAAW,WAAW,MAAM,SAAS,IAAI,MAAM;AAAA,MACrF,YAAY,MAAM;AAAA,IAAA;AAGpB,UAAM,EAAE,aAAa,cAAc,eAAe,WAAW;;0BA7B3DA,mBAEM,OAAA;AAAA,iBAFG;AAAA,QAAJ,KAAI;AAAA,QAAe,OAAKC,eAAA,CAAA,gBAAA,EAAA,gBAAqCC,MAAA,SAAA,GAAS,eAAA,CAAkBA,MAAA,SAAA,EAAA,CAAS,CAAA;AAAA,MAAA;QACpGC,WAAa,KAAA,QAAA,WAAA,CAAA,GAAA,QAAA,IAAA;AAAA,MAAA;;;;;"}